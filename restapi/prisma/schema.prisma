generator client {
  provider = "prisma-client-js"
}


//generator erd {
  //provider = "prisma-erd-generator"
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserCourse {
  user_id   Int
  course_id Int
  course    course @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, course_id])
}

model answer {
  id             Int            @id @default(autoincrement())
  question_id    Int
  description    String         @db.VarChar
  is_correct     Boolean?
  answer_results answerResult[]
  question       question?      @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model course {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar
  description    String           @db.VarChar
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  UserCourse     UserCourse[]
  courseQuestion courseQuestion[]
  courseSurvey   courseSurvey[]
}

model courseQuestion {
  question_id Int
  course_id   Int
  course      course   @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  question    question @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([question_id, course_id])
}

model courseSurvey {
  survey_id Int
  course_id Int
  course    course @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  survey    survey @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([survey_id, course_id])
}

model gameResult {
  game_id        Int
  user_id        Int
  score          Int
  answer_results answerResult[]
  user           user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  game           game           @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([game_id, user_id])
}

model answerResult {
  game_id        Int
  user_id        Int
  answer_id      Int?
  question_index Int
  answered       Boolean
  game_result    gameResult? @relation(fields: [game_id, user_id], references: [game_id, user_id], onDelete: Cascade, onUpdate: NoAction)
  answer         answer?      @relation(fields: [answer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([game_id, user_id])
}

model game {
  id                    Int          @id @default(autoincrement())
  host_id               Int
  survey_id             Int
  type                  game_type
  state                 state
  point_type            point_type
  are_questions_visible Boolean?
  game_result           gameResult[]
  created_at            DateTime?    @default(now()) @db.Timestamp(6)
  date                  DateTime?    @db.Timestamp(6)
  user                  user?        @relation(fields: [host_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  survey                survey?      @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model question {
  id              Int              @id @default(autoincrement())
  description     String           @db.VarChar
  subject         String           @db.VarChar
  type            type
  answer_time     Int
  resource        String?
  user_creator_id Int
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  answers         answer[]
  courseQuestion  courseQuestion[]
  survey          survey[]
  user            user?            @relation(fields: [user_creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model survey {
  id              Int            @id @default(autoincrement())
  title           String         @db.VarChar
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  user_creator_id Int?
  resource        String?
  courseSurvey    courseSurvey[]
  game            game[]
  user            user?          @relation(fields: [user_creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  questions       question[]
}

model user {
  id          Int          @id @default(autoincrement())
  username    String       @unique @db.VarChar
  password    String       @db.VarChar
  created_at  DateTime?    @default(now()) @db.Timestamp(6)
  role        role
  UserCourse  UserCourse[]
  game        game[]
  survey      survey[]
  question    question[]
  game_result gameResult[]
}

enum role {
  student
  professor
  admin
}

enum state {
  created
  started
  closed
}

enum type {
  multioption
  true_false
  short
}

enum game_type {
  offline
  online
}

enum point_type {
  standard
  double
  no_points
}
